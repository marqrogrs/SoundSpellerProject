type DeleteManyPayload {
  deletedCount: Int!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Lesson {
  _id: ObjectId
  description: String
  lesson_id: String
  lesson_section: String
  title: String
  words: [String]
}

input LessonInsertInput {
  description: String
  lesson_id: String
  lesson_section: String
  title: String
  words: [String]
  _id: ObjectId
}

input LessonQueryInput {
  lesson_id_in: [String]
  lesson_id_lte: String
  lesson_id_gte: String
  _id: ObjectId
  lesson_section_in: [String]
  description_nin: [String]
  lesson_section_nin: [String]
  description_lt: String
  lesson_section_gt: String
  title_exists: Boolean
  _id_ne: ObjectId
  AND: [LessonQueryInput!]
  lesson_id_ne: String
  words_exists: Boolean
  title_lte: String
  lesson_section: String
  words_nin: [String]
  title_ne: String
  _id_gt: ObjectId
  description_gte: String
  lesson_id_lt: String
  lesson_section_ne: String
  _id_nin: [ObjectId]
  title: String
  lesson_id_exists: Boolean
  words: [String]
  description_in: [String]
  lesson_id_gt: String
  description_lte: String
  lesson_section_lt: String
  _id_exists: Boolean
  title_lt: String
  description: String
  _id_lte: ObjectId
  title_gt: String
  lesson_id: String
  lesson_id_nin: [String]
  title_in: [String]
  description_ne: String
  lesson_section_lte: String
  lesson_section_gte: String
  words_in: [String]
  _id_in: [ObjectId]
  description_gt: String
  lesson_section_exists: Boolean
  title_nin: [String]
  title_gte: String
  _id_gte: ObjectId
  OR: [LessonQueryInput!]
  description_exists: Boolean
  _id_lt: ObjectId
}

enum LessonSortByInput {
  DESCRIPTION_DESC
  _ID_ASC
  TITLE_ASC
  TITLE_DESC
  _ID_DESC
  DESCRIPTION_ASC
  LESSON_ID_ASC
  LESSON_ID_DESC
  LESSON_SECTION_ASC
  LESSON_SECTION_DESC
}

input LessonUpdateInput {
  words_unset: Boolean
  _id_unset: Boolean
  lesson_section: String
  description: String
  description_unset: Boolean
  title: String
  lesson_id: String
  lesson_id_unset: Boolean
  title_unset: Boolean
  _id: ObjectId
  lesson_section_unset: Boolean
  words: [String]
}

type Mutation {
  deleteManyLessons(query: LessonQueryInput): DeleteManyPayload
  deleteManyPhonemes(query: PhonemeQueryInput): DeleteManyPayload
  deleteManyWords(query: WordQueryInput): DeleteManyPayload
  deleteOneLesson(query: LessonQueryInput!): Lesson
  deleteOnePhoneme(query: PhonemeQueryInput!): Phoneme
  deleteOneWord(query: WordQueryInput!): Word
  insertManyLessons(data: [LessonInsertInput!]!): InsertManyPayload
  insertManyPhonemes(data: [PhonemeInsertInput!]!): InsertManyPayload
  insertManyWords(data: [WordInsertInput!]!): InsertManyPayload
  insertOneLesson(data: LessonInsertInput!): Lesson
  insertOnePhoneme(data: PhonemeInsertInput!): Phoneme
  insertOneWord(data: WordInsertInput!): Word
  replaceOneLesson(data: LessonInsertInput!, query: LessonQueryInput): Lesson
  replaceOnePhoneme(query: PhonemeQueryInput, data: PhonemeInsertInput!): Phoneme
  replaceOneWord(query: WordQueryInput, data: WordInsertInput!): Word
  updateManyLessons(query: LessonQueryInput, set: LessonUpdateInput!): UpdateManyPayload
  updateManyPhonemes(set: PhonemeUpdateInput!, query: PhonemeQueryInput): UpdateManyPayload
  updateManyWords(query: WordQueryInput, set: WordUpdateInput!): UpdateManyPayload
  updateOneLesson(set: LessonUpdateInput!, query: LessonQueryInput): Lesson
  updateOnePhoneme(query: PhonemeQueryInput, set: PhonemeUpdateInput!): Phoneme
  updateOneWord(query: WordQueryInput, set: WordUpdateInput!): Word
  upsertOneLesson(query: LessonQueryInput, data: LessonInsertInput!): Lesson
  upsertOnePhoneme(query: PhonemeQueryInput, data: PhonemeInsertInput!): Phoneme
  upsertOneWord(data: WordInsertInput!, query: WordQueryInput): Word
}

scalar ObjectId

type Phoneme {
  _id: ObjectId
  files: [String]
  phoneme: String
}

input PhonemeInsertInput {
  _id: ObjectId
  files: [String]
  phoneme: String
}

input PhonemeQueryInput {
  _id: ObjectId
  _id_in: [ObjectId]
  phoneme_lt: String
  files_exists: Boolean
  _id_gt: ObjectId
  _id_gte: ObjectId
  phoneme_nin: [String]
  OR: [PhonemeQueryInput!]
  _id_ne: ObjectId
  phoneme_lte: String
  phoneme_in: [String]
  phoneme_ne: String
  phoneme: String
  phoneme_gte: String
  phoneme_exists: Boolean
  files_nin: [String]
  AND: [PhonemeQueryInput!]
  _id_lt: ObjectId
  _id_lte: ObjectId
  _id_nin: [ObjectId]
  files: [String]
  files_in: [String]
  phoneme_gt: String
  _id_exists: Boolean
}

enum PhonemeSortByInput {
  _ID_ASC
  _ID_DESC
  PHONEME_ASC
  PHONEME_DESC
}

input PhonemeUpdateInput {
  files_unset: Boolean
  phoneme: String
  phoneme_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  files: [String]
}

type Query {
  lesson(query: LessonQueryInput): Lesson
  lessons(sortBy: LessonSortByInput, query: LessonQueryInput, limit: Int = 100): [Lesson]!
  phoneme(query: PhonemeQueryInput): Phoneme
  phonemes(sortBy: PhonemeSortByInput, query: PhonemeQueryInput, limit: Int = 100): [Phoneme]!
  word(query: WordQueryInput): Word
  words(sortBy: WordSortByInput, query: WordQueryInput, limit: Int = 100): [Word]!
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type Word {
  _id: ObjectId
  graphemes: [String]
  phonemes: [String]
  syllables: [String]
  word: String
}

input WordInsertInput {
  word: String
  _id: ObjectId
  graphemes: [String]
  phonemes: [String]
  syllables: [String]
}

input WordQueryInput {
  _id_lte: ObjectId
  phonemes_exists: Boolean
  _id_lt: ObjectId
  _id_nin: [ObjectId]
  word: String
  word_in: [String]
  graphemes_nin: [String]
  word_gt: String
  _id_ne: ObjectId
  _id_exists: Boolean
  _id: ObjectId
  graphemes_exists: Boolean
  phonemes: [String]
  syllables_in: [String]
  word_gte: String
  word_nin: [String]
  graphemes_in: [String]
  _id_gte: ObjectId
  phonemes_nin: [String]
  graphemes: [String]
  _id_in: [ObjectId]
  phonemes_in: [String]
  _id_gt: ObjectId
  word_ne: String
  AND: [WordQueryInput!]
  syllables: [String]
  word_exists: Boolean
  syllables_nin: [String]
  syllables_exists: Boolean
  word_lt: String
  word_lte: String
  OR: [WordQueryInput!]
}

enum WordSortByInput {
  _ID_DESC
  WORD_ASC
  WORD_DESC
  _ID_ASC
}

input WordUpdateInput {
  phonemes: [String]
  word: String
  word_unset: Boolean
  graphemes: [String]
  graphemes_unset: Boolean
  _id_unset: Boolean
  phonemes_unset: Boolean
  syllables_unset: Boolean
  syllables: [String]
  _id: ObjectId
}