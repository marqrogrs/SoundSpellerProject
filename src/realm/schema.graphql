type DeleteManyPayload {
  deletedCount: Int!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Lesson {
  _id: ObjectId
  description: String
  lesson_id: String
  lesson_section: String
  title: String
  words: [String]
}

input LessonInsertInput {
  description: String
  lesson_id: String
  lesson_section: String
  title: String
  words: [String]
  _id: ObjectId
}

input LessonQueryInput {
  lesson_section_exists: Boolean
  lesson_section_lt: String
  OR: [LessonQueryInput!]
  _id_ne: ObjectId
  description_gte: String
  lesson_id_gte: String
  title_nin: [String]
  _id: ObjectId
  title_exists: Boolean
  description_in: [String]
  _id_gt: ObjectId
  description_lt: String
  lesson_section_gte: String
  lesson_section_in: [String]
  description_ne: String
  title_in: [String]
  description_lte: String
  lesson_id_exists: Boolean
  words_exists: Boolean
  lesson_id_lte: String
  lesson_id_in: [String]
  title_ne: String
  lesson_id_nin: [String]
  lesson_section_lte: String
  lesson_id_gt: String
  lesson_section_nin: [String]
  description_gt: String
  _id_lt: ObjectId
  description: String
  lesson_section_gt: String
  _id_nin: [ObjectId]
  words_in: [String]
  title_lte: String
  lesson_section_ne: String
  lesson_id_ne: String
  title_gt: String
  lesson_id: String
  title_gte: String
  title_lt: String
  words: [String]
  description_nin: [String]
  description_exists: Boolean
  words_nin: [String]
  _id_gte: ObjectId
  lesson_id_lt: String
  AND: [LessonQueryInput!]
  _id_exists: Boolean
  title: String
  _id_in: [ObjectId]
  _id_lte: ObjectId
  lesson_section: String
}

enum LessonSortByInput {
  DESCRIPTION_DESC
  LESSON_ID_ASC
  LESSON_ID_DESC
  TITLE_ASC
  TITLE_DESC
  _ID_DESC
  DESCRIPTION_ASC
  LESSON_SECTION_ASC
  LESSON_SECTION_DESC
  _ID_ASC
}

input LessonUpdateInput {
  lesson_id_unset: Boolean
  lesson_section_unset: Boolean
  words: [String]
  _id_unset: Boolean
  lesson_section: String
  title_unset: Boolean
  words_unset: Boolean
  description: String
  description_unset: Boolean
  title: String
  _id: ObjectId
  lesson_id: String
}

type Mutation {
  deleteManyLessons(query: LessonQueryInput): DeleteManyPayload
  deleteManyPhonemes(query: PhonemeQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteManyWords(query: WordQueryInput): DeleteManyPayload
  deleteOneLesson(query: LessonQueryInput!): Lesson
  deleteOnePhoneme(query: PhonemeQueryInput!): Phoneme
  deleteOneUser(query: UserQueryInput!): User
  deleteOneWord(query: WordQueryInput!): Word
  insertManyLessons(data: [LessonInsertInput!]!): InsertManyPayload
  insertManyPhonemes(data: [PhonemeInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertManyWords(data: [WordInsertInput!]!): InsertManyPayload
  insertOneLesson(data: LessonInsertInput!): Lesson
  insertOnePhoneme(data: PhonemeInsertInput!): Phoneme
  insertOneUser(data: UserInsertInput!): User
  insertOneWord(data: WordInsertInput!): Word
  replaceOneLesson(query: LessonQueryInput, data: LessonInsertInput!): Lesson
  replaceOnePhoneme(query: PhonemeQueryInput, data: PhonemeInsertInput!): Phoneme
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  replaceOneWord(query: WordQueryInput, data: WordInsertInput!): Word
  updateManyLessons(query: LessonQueryInput, set: LessonUpdateInput!): UpdateManyPayload
  updateManyPhonemes(query: PhonemeQueryInput, set: PhonemeUpdateInput!): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateManyWords(query: WordQueryInput, set: WordUpdateInput!): UpdateManyPayload
  updateOneLesson(query: LessonQueryInput, set: LessonUpdateInput!): Lesson
  updateOnePhoneme(query: PhonemeQueryInput, set: PhonemeUpdateInput!): Phoneme
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  updateOneWord(query: WordQueryInput, set: WordUpdateInput!): Word
  upsertOneLesson(query: LessonQueryInput, data: LessonInsertInput!): Lesson
  upsertOnePhoneme(query: PhonemeQueryInput, data: PhonemeInsertInput!): Phoneme
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
  upsertOneWord(query: WordQueryInput, data: WordInsertInput!): Word
}

scalar ObjectId

type Phoneme {
  _id: ObjectId
  files: [String]
  phoneme: String
}

input PhonemeInsertInput {
  _id: ObjectId
  files: [String]
  phoneme: String
}

input PhonemeQueryInput {
  AND: [PhonemeQueryInput!]
  _id: ObjectId
  phoneme: String
  phoneme_nin: [String]
  _id_lt: ObjectId
  files: [String]
  files_exists: Boolean
  files_nin: [String]
  OR: [PhonemeQueryInput!]
  _id_lte: ObjectId
  phoneme_gt: String
  phoneme_lt: String
  _id_ne: ObjectId
  _id_gte: ObjectId
  files_in: [String]
  _id_gt: ObjectId
  phoneme_lte: String
  phoneme_in: [String]
  _id_exists: Boolean
  phoneme_ne: String
  phoneme_exists: Boolean
  phoneme_gte: String
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
}

enum PhonemeSortByInput {
  PHONEME_ASC
  PHONEME_DESC
  _ID_ASC
  _ID_DESC
}

input PhonemeUpdateInput {
  files: [String]
  files_unset: Boolean
  phoneme: String
  phoneme_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
}

type Query {
  lesson(query: LessonQueryInput): Lesson
  lessons(query: LessonQueryInput, limit: Int = 100, sortBy: LessonSortByInput): [Lesson]!
  phoneme(query: PhonemeQueryInput): Phoneme
  phonemes(sortBy: PhonemeSortByInput, query: PhonemeQueryInput, limit: Int = 100): [Phoneme]!
  user(query: UserQueryInput): User
  users(sortBy: UserSortByInput, query: UserQueryInput, limit: Int = 100): [User]!
  word(query: WordQueryInput): Word
  words(query: WordQueryInput, limit: Int = 100, sortBy: WordSortByInput): [Word]!
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type User {
  _id: String
  progress: [UserProgress]
}

input UserInsertInput {
  progress: [UserProgressInsertInput]
  _id: String
}

type UserProgress {
  completed_words: Int
  lesson: String
  level: Int
}

input UserProgressInsertInput {
  completed_words: Int
  lesson: String
  level: Int
}

input UserProgressQueryInput {
  lesson_in: [String]
  completed_words: Int
  OR: [UserProgressQueryInput!]
  completed_words_in: [Int]
  level_gt: Int
  lesson_exists: Boolean
  completed_words_gte: Int
  lesson_ne: String
  level_ne: Int
  lesson_lte: String
  completed_words_lt: Int
  level_exists: Boolean
  completed_words_lte: Int
  lesson_nin: [String]
  completed_words_exists: Boolean
  level_in: [Int]
  lesson_lt: String
  AND: [UserProgressQueryInput!]
  completed_words_nin: [Int]
  lesson_gte: String
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level: Int
  completed_words_gt: Int
  lesson_gt: String
  level_nin: [Int]
  lesson: String
  completed_words_ne: Int
}

input UserProgressUpdateInput {
  lesson: String
  lesson_unset: Boolean
  level: Int
  level_unset: Boolean
  level_inc: Int
  completed_words: Int
  completed_words_inc: Int
  completed_words_unset: Boolean
}

input UserQueryInput {
  _id_nin: [String]
  OR: [UserQueryInput!]
  _id_ne: String
  _id_in: [String]
  progress_in: [UserProgressQueryInput]
  progress_nin: [UserProgressQueryInput]
  progress_exists: Boolean
  _id_exists: Boolean
  _id: String
  _id_lt: String
  _id_gte: String
  _id_lte: String
  _id_gt: String
  AND: [UserQueryInput!]
  progress: [UserProgressQueryInput]
}

enum UserSortByInput {
  _ID_ASC
  _ID_DESC
}

input UserUpdateInput {
  _id_unset: Boolean
  progress: [UserProgressUpdateInput]
  progress_unset: Boolean
  _id: String
}

type Word {
  _id: ObjectId
  graphemes: [String]
  phonemes: [String]
  syllables: [String]
  word: String
}

input WordInsertInput {
  syllables: [String]
  word: String
  _id: ObjectId
  graphemes: [String]
  phonemes: [String]
}

input WordQueryInput {
  graphemes: [String]
  word_nin: [String]
  _id_gt: ObjectId
  syllables_nin: [String]
  word_exists: Boolean
  _id_exists: Boolean
  _id_in: [ObjectId]
  syllables_exists: Boolean
  AND: [WordQueryInput!]
  word_gt: String
  _id_gte: ObjectId
  word_in: [String]
  phonemes_exists: Boolean
  word_lte: String
  graphemes_exists: Boolean
  word: String
  phonemes_nin: [String]
  syllables: [String]
  word_lt: String
  _id: ObjectId
  OR: [WordQueryInput!]
  graphemes_nin: [String]
  _id_nin: [ObjectId]
  _id_lt: ObjectId
  syllables_in: [String]
  phonemes_in: [String]
  word_ne: String
  word_gte: String
  _id_lte: ObjectId
  _id_ne: ObjectId
  graphemes_in: [String]
  phonemes: [String]
}

enum WordSortByInput {
  WORD_ASC
  WORD_DESC
  _ID_ASC
  _ID_DESC
}

input WordUpdateInput {
  _id_unset: Boolean
  graphemes_unset: Boolean
  word: String
  syllables_unset: Boolean
  _id: ObjectId
  phonemes: [String]
  word_unset: Boolean
  graphemes: [String]
  phonemes_unset: Boolean
  syllables: [String]
}